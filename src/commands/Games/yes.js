const { EmbedBuilder, SlashCommandBuilder } = require("@discordjs/builders");
const userModel = require("../../Models/user");

module.exports = {
  data: new SlashCommandBuilder()
    .setName("yes")
    .setDescription("–ü—Ä–∏–Ω—è—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ"),
  async execute(interaction, client) {
    const { member,user, channel, guild, options, guildId } = interaction;
    if (!channel.id === guild.channels.cache.find(n=>n.name === '–∏–≥—Ä—ã')) return interaction.reply({content: "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–Ω–∞–ª #–∏–≥—Ä—ã, —Ç—É—Ç –Ω–µ–ª—å–∑—è", ephemera:true})
    try{
      // –û–±—å—è–≤–ª–µ–Ω–∏–µ –î–ë
      const user1 = await userModel.findOne({ uid: user.id , gid: guildId});
      const user2 = await userModel.findOne({ uid: user1.game.id , gid: guildId});
      if(!user1 ) return interaction.reply('–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register')
      const res = Math.floor(Math.random() * (6 - 1) + 1);
      const res2 = Math.floor(Math.random() * (6 - 1) + 1);      
      // –°–∏—Å—Ç–µ–º–∞ –ø—Ä–∏–Ω—è—Ç–∏—è
      if( user1.game.status == true){
        if (user1.game.who === "–ü—Ä–∏–Ω–∏–º–∞—é—â–∏–π"){
          const resultEmbed = new EmbedBuilder()
          .setTitle("–†–µ–∑—É–ª—å—Ç–∞—Ç")
          .addFields({name: `${user1.tag}`, value: `–í—ã–ø–∞–ª–æ: ${res}`}, {name: `${user2.tag}`, value: `–í—ã–ø–∞–ª–æ: ${res2}`})
        user1.game.result = res;
        user2.game.result = res2;
        if ( user1.game.result > user2.game.result ){
          resultEmbed.setDescription(`–ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏: \`${user1.game.bet * 2}üí∏\`\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${user1.tag}`)
          // –≤—ã–¥–∞—á–∞ –±–∞–ª–∞–Ω—Å–∞
          user1.eco.balance += user1.game.bet;
          user2.eco.balance -= user2.game.bet;
          // –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
          user1.game.bet = 0;
          user2.game.bet = 0;
          user1.game.result = 0;
          user2.game.result = 0;
          user2.game.id = 0;
          user1.game.id = 0;
          user2.game.bet = 0;
          user1.game.status = false;
          user2.game.status = false;
          user1.game.who = "";
          user2.game.who = "";
          // 
          client.users.send(user1.game.id,"–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏")
          interaction.reply({embeds:[resultEmbed]})
          await user1.save();
          await user2.save();
        } else {
          resultEmbed.setDescription(`–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ \`${user2.game.bet}üí∏\`\n–ü–æ–±–µ–¥–∏—Ç–µ–ª—å: ${user2.tag}`)
          // –≤—ã–¥–∞—á–∞ –±–∞–ª–∞–Ω—Å–∞
          user1.eco.balance -= user1.game.bet;
          user2.eco.balance += user2.game.bet;
          // –æ–±–Ω—É–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫
          user1.game.bet = 0;
          user2.game.bet = 0;
          user1.game.result = 0;
          user2.game.result = 0;
          user1.game.id = 0;
          user2.game.bet = 0;
          user1.game.status = false;
          user2.game.status = false;
          user1.game.who = "";
          user2.game.who = "";
          // 
          interaction.reply({embeds:[resultEmbed]})
          await user1.save();
          await user2.save();          
        }
        } else {
          return interaction.reply("–í—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—â–∏–π, –æ—Ç–º–µ–Ω–∏—Ç—å –º–æ–∂–Ω–æ –∫–æ–º–∞–¥–Ω–æ–π [ /no ]")
        }
      } else {
        return interaction.reply({content: "–£ –≤–∞—Å –Ω–µ—Ç—É –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π", ephemeral:true})
      }
    } catch(e){
      console.log(e);
      interaction.reply({ content: `–û—à–∏–±–∫–∞`, ephemeral: true });
    }
  },
};
