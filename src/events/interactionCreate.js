const {
  Interaction,
  PermissionFlagsBits,
  messageLink,
  EmbedBuilder,
  ComponentType,
} = require("discord.js");
const gameModel = require("../Models/game");
const moneysettings = require("../Models/moneysettings");
const userModel = require("../Models/user");
module.exports = {
  name: "interactionCreate",
  async execute(interaction, client) {
    const { values, guild, customId, member, guildId, message, channel, user } = interaction;
    if (interaction.isChatInputCommand()) {
      const command = client.commands.get(interaction.commandName);
      if (!command) return;
      try {
        await command.execute(interaction, client);
      } catch (error) {
        console.log(error);
        await interaction.editReply({
          content: "–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã!",
          ephemeral: true,
        });
      }
    } else if (interaction.isButton()) {
            if(customId == "verify"){
              const role = guild.roles.cache.find((n) => n.name === "Verified");
              if (member.roles.cache.has(role.id)) return;
              member.roles.add(role)
            }
            const modelUser = await userModel.findOne({ uid: member.id, gid: guildId})
            const modelGame = await gameModel.findOne({ uid: member.id, messageID: message.id})
            const randomN = Math.floor(Math.random() * 100) 
            const dm = await moneysettings.findOne({ gid: guild.id})
            if(!dm) return interaction.reply("**\`/fixserver\` –°—Ä–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ __–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ Discord__ —Å–µ—Ä–≤–µ—Ä–∞**")
            function getRandomArbitrary(min, max) {
              return Math.random() * (max - min) + min;
            }
            let reward = getRandomArbitrary(dm.work_min, dm.work_max);
            const embed = message.embeds[0];
            const embed1 = new EmbedBuilder();
            const sem = EmbedBuilder.from(embed)
            let bet
            if(modelUser) bet = modelUser.game.bet;
            if (!embed) return interaction.reply({content: "–ï–º–±–µ–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",ephemeral: true,});
            switch (customId) {
              case "no-work":
                message.delete();
                break;
              case "yes-work":
                if(modelUser.premium == true) reward = reward*1.5;
                  const say = [
                    "–ø—Å–∏—Ö–æ–ª–æ–≥–æ–º","–¥–æ–∫—Ç–æ—Ä–æ–º","–ø–æ–∂–∞—Ä–Ω—ã–º","–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º","–¥–∞–ª—å–Ω–æ–±–æ–π—â–∏–∫–æ–º","—Ä–∞–∑–≤–æ–∑—á–∏–∫–æ–º –ø–∏—Ü—Ü—ã",
                    "—Å–∞–¥–æ–≤–Ω–∏–∫–æ–º","—Ç–∞–∫—Å–∏—Å—Ç–æ–º","–º–µ—Ö–∞–Ω–∏–∫–æ–º","—Å—Ç—Ä–æ–∏—Ç–µ–ª–µ–º","–∞—É–¥–∏—Ç–æ—Ä–æ–º","–∞–Ω–∞–ª–∏—Ç–∏–∫–æ–º","–±–∞–Ω–∫–∏—Ä–æ–º","–±—Ä–æ–∫–µ—Ä–æ–º","–¥–∏–ª–µ—Ä–æ–º","–±—É—Ö–≥–∞–ª—Ç–µ—Ä–æ–º","–æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–∏—Å—Ç–æ–º",
                    "—Å–º–µ—Ç—á–∏–∫–æ–º","—Ä–µ–ª–∞–π—Ç–µ—Ä–æ–º","—Ç–æ–≤–∞—Ä–æ–≤–µ–¥–æ–º"
                  ];
                  modelUser.eco.balance += parseInt(reward);
                  embed1.setTimestamp()
                  .setAuthor({
                    name: interaction.member.displayName,
                    iconURL: interaction.member.displayAvatarURL({ dynamic: true }),
                  }).setColor("Blurple").setFooter({ text: guild.name, iconURL:guild.iconURL({dynamic:true})})
                  .addFields(
                    {name: "–í—ã –ø–æ–ª—É—á–∏–ª–∏:", value: `${parseInt(reward)}üí∏`, inline:true}, 
                    {name: "–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:", value:  `${modelUser.eco.balance}üí∏`, inline:true}
                  ).setDescription(`**„Éª–í—ã –æ—á–µ–Ω—å –¥–æ–ª–≥–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª–∏ \`${say[Math.floor(Math.random() * say.length)]}\`, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤ —Ü–µ–Ω—Ç—Ä –∑–∞–Ω—è—Ç–æ—Å—Ç–∏, –∫–æ–∏–Ω—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –≤–∞—à —Å—á—ë—Ç.**`) 
                  if(modelUser.premium == true) {
                    embed1.setDescription(`**„Éª–í—ã –æ—á–µ–Ω—å –¥–æ–ª–≥–æ –ø—Ä–æ—Ä–∞–±–æ—Ç–∞–ª–∏ \`${say[Math.floor(Math.random() * say.length)]}\`, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤ —Ü–µ–Ω—Ç—Ä –∑–∞–Ω—è—Ç–æ—Å—Ç–∏, –∫–æ–∏–Ω—ã –¥–æ–ª–∂–Ω—ã –ø–æ—Å—Ç—É–ø–∏—Ç—å –Ω–∞ –≤–∞—à —Å—á—ë—Ç.\n\n–¢–∞–∫ –∫–∞–∫ –≤—ã \`–ü—Ä–µ–º–∏—É–º-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å\` –∫–æ–∏–Ω—ã –±—ã–ª–∏ —É–º–Ω–æ–∂–µ–Ω—ã –≤ 1.5 —Ä–∞–∑–∞!**`)
                  }
                  modelUser.eco.workTimes += 1;
                  await modelUser.save();
                  message.edit({embeds:[embed1], components: []})
                break;
              case "game-red":
                  if(!modelGame || !modelUser) return;
                  if(randomN > 50){
                  modelUser.eco.balance += parseInt(bet);
                  sem.setColor("Green")
                  sem.setDescription(`**\`¬´–ö—Ä–∞—Å–Ω–æ–µ, –ó–µ–ª–µ–Ω–æ–µ¬ª\`, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å—ã–≥—Ä–∞–ª–∏ –≤ –∏–≥—Ä—É —Å –±–æ—Ç–æ–º\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n„Éª–í—ã –≤—ã–±—Ä–∞–ª–∏: \`üî¥\`\n„Éª–í—ã–ø–∞–ª–æ: \`üî¥\`**`)
                  sem.setFields(
                      {name: `–°—Ç–∞—Ç—É—Å:`, value: `\`–í—ã–∏–≥—Ä—ã—à üü¢\``,inline:true},
                      {name: `–°—Ç–∞–≤–∫–∞:`, value: `\`${bet}\`üí∏`,inline:true},
                      {name: `–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:`, value: `\`${modelUser.eco.balance}\`üí∏`,inline:true},
                  )
                  }
                  if(randomN <= 50){
                    modelUser.eco.balance -= parseInt(bet);
                    sem.setColor("Red")
                    sem.setDescription(`**\`¬´–ö—Ä–∞—Å–Ω–æ–µ, –ó–µ–ª–µ–Ω–æ–µ¬ª\`, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å—ã–≥—Ä–∞–ª–∏ –≤ –∏–≥—Ä—É —Å –±–æ—Ç–æ–º\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n„Éª–í—ã –≤—ã–±—Ä–∞–ª–∏: \`üî¥\`\n„Éª–í—ã–ø–∞–ª–æ: \`üü¢\`**`)
                    sem.setFields(
                        {name: `–°—Ç–∞—Ç—É—Å:`, value: `\`–ü—Ä–æ–∏–≥—Ä—ã—à üî¥\``,inline:true},
                        {name: `–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏:`, value: `\`${bet}\`üí∏`,inline:true},
                        {name: `–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:`, value: `\`${modelUser.eco.balance}\`üí∏`,inline:true},
                    )
                  }
                  modelUser.game.bet = 0;
                  modelGame.messageID = "";
                  await modelUser.save()
                  await modelGame.save()
                  message.edit({embeds:[sem], components:[]})
                  break;
              case "game-green":
              if(!modelGame || !modelUser) return;
              if(randomN > 50){
              modelUser.eco.balance += parseInt(bet);
              sem.setColor("Green")
              sem.setDescription(`**\`¬´–ö—Ä–∞—Å–Ω–æ–µ, –ó–µ–ª–µ–Ω–æ–µ¬ª\`, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å—ã–≥—Ä–∞–ª–∏ –≤ –∏–≥—Ä—É —Å –±–æ—Ç–æ–º\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n„Éª–í—ã –≤—ã–±—Ä–∞–ª–∏: \`üü¢\`\n„Éª–í—ã–ø–∞–ª–æ: \`üü¢\`**`)
              sem.setFields(
                  {name: `–°—Ç–∞—Ç—É—Å:`, value: `\`–í—ã–∏–≥—Ä—ã—à üü¢\``,inline:true},
                  {name: `–°—Ç–∞–≤–∫–∞:`, value: `\`${bet}\`üí∏`,inline:true},
                  {name: `–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:`, value: `\`${modelUser.eco.balance}\`üí∏`,inline:true},
              )
              }
              if(randomN <= 50){
                modelUser.eco.balance -= parseInt(bet);
                sem.setColor("Red")
                sem.setDescription(`**\`¬´–ö—Ä–∞—Å–Ω–æ–µ, –ó–µ–ª–µ–Ω–æ–µ¬ª\`, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å—ã–≥—Ä–∞–ª–∏ –≤ –∏–≥—Ä—É —Å –±–æ—Ç–æ–º\n\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n„Éª–í—ã –≤—ã–±—Ä–∞–ª–∏: \`üü¢\`\n„Éª–í—ã–ø–∞–ª–æ: \`üî¥\`**`)
                sem.setFields(
                    {name: `–°—Ç–∞—Ç—É—Å:`, value: `\`–ü—Ä–æ–∏–≥—Ä—ã—à üî¥\``,inline:true},
                    {name: `–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏:`, value: `\`${bet}\`üí∏`,inline:true},
                    {name: `–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:`, value: `\`${modelUser.eco.balance}\`üí∏`,inline:true},
                )
              }
              modelUser.game.bet = 0;
              modelGame.messageID = "";
              await modelUser.save()
              await modelGame.save()
              message.edit({embeds:[sem], components:[]})
              break;
              case "suggest-accept":
                if (!member.permissions.has(PermissionFlagsBits.Administrator)) return client.users.send(user.id, "–£ —Ç–µ–±—è –Ω–µ—Ç—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
                embed.data.fields[2] = {
                  name: "–°—Ç–∞—Ç—É—Å",
                  value: "–û–¥–æ–±—Ä–µ–Ω",
                  inline: true,
                };
                const acceptEmbed = EmbedBuilder.from(embed).setColor(0x20ff14);
                message.edit({ embeds: [acceptEmbed] });
                interaction.reply({
                  content: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
                  ephemeral: true,
                });
                break;
              case "suggest-decline":
                if (!member.permissions.has(PermissionFlagsBits.Administrator)) return client.users.send(user.id, "–£ —Ç–µ–±—è –Ω–µ—Ç—É –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
                embed.data.fields[2] = {
                  name: "–°—Ç–∞—Ç—É—Å",
                  value: "–û—Ç–∫–∞–∑–∞–Ω",
                  inline: true,
                };
                const declineEmbed =
                  EmbedBuilder.from(embed).setColor(0xff1a00);
                message.edit({ embeds: [declineEmbed] });
                interaction.reply({
                  content: "–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ.",
                  ephemeral: true,
                });
                break;
              default:
                interaction.reply({
                  content: "–≠—Ç–æ —á–µ –∑–∞ –∫–Ω–æ–ø–∫–∞, —è –µ–µ –Ω–µ –∑–Ω–∞—é",
                  ephemeral: true,
                });
                break;
            }
    } else if (interaction.isSelectMenu()) {
      switch (customId) {
        case "reaction-role":
          for (let i = 0; i < values.length; i++) {
            const roleId = values[i];
            const role = guild.roles.cache.get(roleId);
            const hasRole = member.roles.cache.has(roleId);
            switch (hasRole) {
              case true:
                member.roles.remove(roleId);
                break;
              case false:
                member.roles.add(roleId);
                break;
            }
            interaction.reply({ content: "–†–æ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã", ephemeral: true });
            break;
          }
      }
    } else {
      return;
    }
  },
};
